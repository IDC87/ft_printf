Why is used for:

A library is a collection of code routines (functions, classes, variables, etc) that can be called upon when building our program, 
so instead of writing it ourselves, we can go and get it from something that has already been written and optimized. 
That is where the idea behind libraries comes from. We are reusing blocks of codes that have come from somewhere else. 

 - To create a static library or to add additional object files to an existing static library, 
we have to use the GNU ar (archiver) program. We can use a command like this:

    $ ar -rcs libname.a *.o

>>>Library must always be created from object files first<<<

    ar creates and maintains file archives.

    -r replaces or adds file to archive. If archive does not exist, ar creates it and prints a message. 
    -c suppresses the message ar normally prints when it creates a new archive file. 
    -s regenerates the symbol table regardless of whether the command modifies the archive.

 - to create our final executable program:

$ gcc main.c -L. -lname -o main

This will create a program using the object file "main.o", and any symbols it requires from the "name" static library.

Flags description:
-L : Specifies the path to the given libraries ('.' referring to the current directory)
-l : Specifies the library name without the "lib" prefix and the ".a" suffix, 
     because the linker attaches these parts back to the name of the library to create a name of a file to look for.

#OPTIONS
 #@ - to not display in console the command forwarded by this char
 #$ - like a variable declaration
 #$@ is the NAME of the target being generated
 #$< the NAME of the first prerequisite (usually a source file) (dependencies)
 #.PHONY: - one that is not really the name of a file; rather it is just a name for a recipe to be executed
 #gcc -c - compiles to the .o files
 #:= variable evaluated once at assignment time 
 #= evaluated each time it's used (for reference)
 #wildcard -  wildcard card function in make file is to list all the source files with a particular extension
 #patsubst - function to rewrite file names
 # -f to use a makefile with a different name
 # "%.o: %.c" means that any file ending in .o depends on the same filename ending in .c to be present.
 # PS1="\W >" -trims the terminal command prompt 
 # PROMPT_DIRTRIM=2 -also trims terminal (number can be changed acording to desire)
 # CTRL + K and then press S - saves all projects at once in VScode
 # sudo apt-get install -y ascii - installs ascii table in bash (better than the original one)
 # shell find . -type f -name '*.c') - the basic syntax to find stuff

 #SHELL TERMINAL OPTIONS ENV
 # Trimming and colorful terminal - PS1='\e[33;1m\u@\h: \e[31m\W\e[0m\$ '
 #color options:
 #export COLOR_NC='\e[0m' # No Color
 #export COLOR_BLACK='\e[0;30m'
 #export COLOR_GRAY='\e[1;30m'
 #export COLOR_RED='\e[0;31m'
 #export COLOR_LIGHT_RED='\e[1;31m'
 #export COLOR_GREEN='\e[0;32m'
 #export COLOR_LIGHT_GREEN='\e[1;32m'
 #export COLOR_BROWN='\e[0;33m'
 #export COLOR_YELLOW='\e[1;33m'
 #export COLOR_BLUE='\e[0;34m'
 #export COLOR_LIGHT_BLUE='\e[1;34m'
 #export COLOR_PURPLE='\e[0;35m'
 #export COLOR_LIGHT_PURPLE='\e[1;35m'
 #export COLOR_CYAN='\e[0;36m'
 #export COLOR_LIGHT_CYAN='\e[1;36m'
 #export COLOR_LIGHT_GRAY='\e[0;37m'
 #export COLOR_WHITE='\e[1;37m'

 #COMPLILING OPTIONS
 #gcc -WALL -WEXTRA -WERROR
 # -WALL (Enable all warning messages)
 # -WERROR (Make all warnings into errors)
 # -WEXTRA (enable extra warnings)
 # -E (Preprocessor), -S (compiler), -c (assembler)
 # gcc -c name.c && mv name.o folder/ (compiles then move to another folder)
 #gcc -WALL -WEXTRA -WERROR -c nome.c (para compilar o objecto .o)
 # -I (flag that indicates the libft.h)

#FUNCTIONS
 #$(shell date) - show the current time and date
 #$(shell sleep 'time')

#GIT UPLOAD COMMANDS (as they appear in the beginning of a new repo):
 #echo "# Repo_test" >> README.md
 #git init
 #git add README.md
 #git commit -m "first commit"
 #git branch -M main
 #git remote add origin https://github.com/IDC87/Repo_test.git
 #git push -u origin main

 # git config --global credential.helper cache //////IMPORTANTE! keeps cache token in the computer when using https method

 #â€¦or push an existing repository from the command line
 #git remote add origin https://github.com/IDC87/Repo_test.git
 #git branch -M main
 #git push -u origin main

#GIT GENERAL COMMANDS:
 # git rev-parse HEAD - shows the last sha key 
 # git remote get-url origin - shows my current url origin
 # git remote show origin - almost the same, with more details
 # git remote -v - view all the remotes of current repository
 # git remote rm origin/upstream - remove current git url in origin/upstream
 # git push --set-upstream origin master - set the current url as upstream


 #target: dependencies
#	action

#MAKEFILE MUST CONTAIN RULES: $(NAME), all, clean, fclean, re.
#BONUSES MUST BE IN _bonus.{c/h}


 # LINKs (Important) :  https://cs.colby.edu/maxwell/courses/tutorials/maketutor/
                        https://www.mkssoftware.com/docs/man1/ar.1.asp
                        https://dev.to/iamkhalil42/all-you-need-to-know-about-c-static-libraries-1o0b
